{"version":3,"file":"src_worker_js.bundle.js","mappings":";;;;;;;;;;;;;;AAAgE;AAClB;AACJ;;AAE1C,yBAAyB;;AAEzB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,6DAAI;AAC/B,4BAA4B,wBAAwB;AACpD,oCAAoC,+DAAM;AAC1C;AACA;AACA;AACA;AACA,sCAAsC,wEAAe;AACrD;AACA,mCAAmC,8DAA8D;AACjG,aAAa;;AAEb;AACA;AACA,mCAAmC,iDAAiD;AACpF,cAAc;AACd;AACA,mCAAmC,oCAAoC;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,gCAAgC,sBAAsB;AACtD,6CAA6C,6DAAI;AACjD;AACA;AACA,oEAAoE,2FAAqD;AACzH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA,2DAA2D,sDAAsD;AACjH,6BAA6B;AAC7B;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;;AAEjB;AACA,gCAAgC,gCAAgC;AAChE;AACA;;AAEA,mCAAmC,mEAAmE;AACtG,cAAc;AACd;AACA,mCAAmC,oCAAoC;AACvE;AACA;AACA;AACA;;;;;;;UCtGA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;;;;WClCA;WACA;WACA;WACA;WACA,+BAA+B,wCAAwC;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC3BA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;;;;;WCRA;WACA;WACA;WACA;WACA;;;;;WCJA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WClBA;;WAEA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,aAAa;WACb;WACA;WACA;WACA;;WAEA;WACA;WACA;;WAEA;;WAEA;;;;;WCpCA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;UENA;UACA","sources":["webpack://mwicombatsimulator/./src/worker.js","webpack://mwicombatsimulator/webpack/bootstrap","webpack://mwicombatsimulator/webpack/runtime/chunk loaded","webpack://mwicombatsimulator/webpack/runtime/define property getters","webpack://mwicombatsimulator/webpack/runtime/ensure chunk","webpack://mwicombatsimulator/webpack/runtime/get javascript chunk filename","webpack://mwicombatsimulator/webpack/runtime/global","webpack://mwicombatsimulator/webpack/runtime/hasOwnProperty shorthand","webpack://mwicombatsimulator/webpack/runtime/make namespace object","webpack://mwicombatsimulator/webpack/runtime/publicPath","webpack://mwicombatsimulator/webpack/runtime/importScripts chunk loading","webpack://mwicombatsimulator/webpack/runtime/startup chunk dependencies","webpack://mwicombatsimulator/webpack/before-startup","webpack://mwicombatsimulator/webpack/startup","webpack://mwicombatsimulator/webpack/after-startup"],"sourcesContent":["import CombatSimulator from \"./combatsimulator/combatSimulator\";\nimport Player from \"./combatsimulator/player\";\nimport Zone from \"./combatsimulator/zone\";\n\nconst THREAD_LIMIT = 10; // TODO: Configurable thread limit\n\nclass SimulationManager {\n    constructor() {\n        this.simulations = [];\n        this.simResults;\n    }\n\n    addSimulation(sim) {\n        this.simulations.push(sim);\n    }\n\n    async startSimulations(simulationTimeLimit) {\n        const simulationPromises = this.simulations.map(simulation => simulation.simulate(simulationTimeLimit));\n        const results = await Promise.all(simulationPromises);\n        return results;\n    }\n}\n\nonmessage = async function (event) {\n    switch (event.data.type) {\n        case \"start_simulation\":\n            let playersData = event.data.players;\n            let players = [];\n            let zone = new Zone(event.data.zoneHrid);\n            for (let i = 0; i < playersData.length; i++) {\n                let currentPlayer = Player.createFromDTO(structuredClone(playersData[i]));\n                currentPlayer.zoneBuffs = zone.buffs;\n                players.push(currentPlayer);\n            }\n            let simulationTimeLimit = event.data.simulationTimeLimit;\n            let combatSimulator = new CombatSimulator(players, zone);\n            combatSimulator.addEventListener(\"progress\", (event) => {\n                this.postMessage({ type: \"simulation_progress\", progress: event.detail.progress });\n            });\n\n            try {\n                let simResult = await combatSimulator.simulate(simulationTimeLimit);\n                this.postMessage({ type: \"simulation_result\", simResult: simResult });\n            } catch (e) {\n                console.log(e);\n                this.postMessage({ type: \"simulation_error\", error: e });\n            }\n            break;\n        case \"start_simulation_all_zones\":\n            // get now time\n            const now = new Date();\n            const zoneHrids = event.data.zones;\n            let zoneProgress = {};\n\n            try {\n                const simulatorWorkerPool = []\n                for (let i = 0; i < zoneHrids.length; i++) {\n                    const zoneInstance = new Zone(zoneHrids[i]);\n                    if (zoneInstance.monsterSpawnInfo.randomSpawnInfo.spawns) {\n                        // Create threads for all-simulation senario\n                        const simulationWorker = new Worker(new URL('combatsimulator/combatSimulator.js', import.meta.url));\n                        simulatorWorkerPool.push(simulationWorker);\n                        // Do simulation\n                        simulationWorker.postMessage({\n                            type: \"start_simulation\",\n                            players: event.data.players,\n                            zone: zoneHrids[i],\n                            simulationTimeLimit: event.data.simulationTimeLimit,\n                        });\n                    }\n                }\n\n                const outer_worker = this;\n                // Wait for all simulations to finish\n                const simulationResults = await Promise.all(simulatorWorkerPool.map(worker => {\n                    return new Promise((resolve, reject) => {\n                        worker.onmessage = function (event) {\n                            if (event.data.type === \"simulation_result\") {\n                                resolve(event.data.simResult);\n                            } else if (event.data.type === \"simulation_progress\"){\n                                zoneProgress[event.data.zone] = event.data.progress;\n                                let totalProgress = Object.values(zoneProgress).reduce((acc, progress) => acc + progress, 0) / Object.keys(zoneProgress).length;\n                                outer_worker.postMessage({ type: \"simulation_progress\", progress: totalProgress });\n                            }else if (event.data.type === \"simulation_error\") {\n                                reject(event.data.error);\n                            }\n                        };\n                    });\n                }));\n\n                // Terminate all workers\n                for (let i = 0; i < simulatorWorkerPool.length; i++) {\n                    simulatorWorkerPool[i].terminate();\n                }\n\n                this.postMessage({ type: \"simulation_result_allZones\", simResults: simulationResults });\n            } catch (e) {\n                console.log(e);\n                this.postMessage({ type: \"simulation_error\", error: e });\n            }\n            break;\n    }\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendors-node_modules_heap-js_dist_heap-js_es5_js\",\"src_combatsimulator_combatSimulator_js\"], () => (__webpack_require__(\"./src/worker.js\")))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"\" + chunkId + \".bundle.js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/^blob:/, \"\").replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = self.location + \"\";\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t\"src_worker_js\": 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkmwicombatsimulator\"] = self[\"webpackChunkmwicombatsimulator\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn Promise.all([\n\t\t__webpack_require__.e(\"vendors-node_modules_heap-js_dist_heap-js_es5_js\"),\n\t\t__webpack_require__.e(\"src_combatsimulator_combatSimulator_js\")\n\t]).then(next);\n};","","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n",""],"names":[],"sourceRoot":""}